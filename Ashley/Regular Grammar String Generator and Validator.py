import tkinter as tk
from tkinter import ttk, messagebox

def parse_production_rules(rules_input):
    """
    Parses the production rules input by the user into a usable format.

    Parameters:
        rules_input (str): Multiline input where each line represents a production rule in the form A -> xB | y.

    Returns:
        dict: A dictionary representing the grammar.
    """
    grammar = {}
    for line in rules_input.strip().splitlines():
        line = line.replace(" ", "")  # Remove whitespace
        if "->" not in line:
            raise ValueError("Invalid rule format. Use 'A -> xB | y'.")
        head, productions = line.split("->")
        grammar.setdefault(head, []).extend(productions.split("|"))
    return grammar

def generate_strings(grammar, start_symbol, max_length):
    """
    Generates strings from the given grammar up to a specified length.

    Parameters:
        grammar (dict): The parsed grammar.
        start_symbol (str): The starting symbol of the grammar.
        max_length (int): The maximum length of strings to generate.

    Returns:
        list: A list of generated strings.
    """
    generated = set()

    def dfs(current_string):
        if len(current_string) > max_length:
            return
        if all(char.islower() for char in current_string):  # If terminal-only, it's a valid string
            generated.add(current_string)
        for i, char in enumerate(current_string):
            if char.isupper():  # Non-terminal found
                for production in grammar.get(char, []):
                    dfs(current_string[:i] + production + current_string[i+1:])

    dfs(start_symbol)
    return sorted(generated)

def is_valid_string(grammar, start_symbol, string):
    """
    Checks if a string can be generated by the grammar starting from the start symbol.

    Parameters:
        grammar (dict): The parsed grammar.
        start_symbol (str): The starting symbol of the grammar.
        string (str): The string to validate.

    Returns:
        bool: True if the string is valid, False otherwise.
    """
    return string in generate_strings(grammar, start_symbol, len(string))

def on_generate():
    try:
        rules_input = rules_text.get("1.0", tk.END)
        grammar = parse_production_rules(rules_input)
        start_symbol = start_symbol_entry.get()
        max_length = int(max_length_entry.get())

        strings = generate_strings(grammar, start_symbol, max_length)

        output_text.delete("1.0", tk.END)
        output_text.insert(tk.END, "\n".join(strings))

    except Exception as e:
        messagebox.showerror("Error", str(e))

def on_validate():
    try:
        rules_input = rules_text.get("1.0", tk.END)
        grammar = parse_production_rules(rules_input)
        start_symbol = start_symbol_entry.get()
        input_string = validate_entry.get()

        if is_valid_string(grammar, start_symbol, input_string):
            messagebox.showinfo("Validation Result", f"'{input_string}' is valid.")
        else:
            messagebox.showinfo("Validation Result", f"'{input_string}' is not valid.")

    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create the main Tkinter window
root = tk.Tk()
root.title("Regular Grammar String Generator")

# Input fields for grammar components
ttk.Label(root, text="Production Rules (e.g., S -> aA | b):").grid(row=0, column=0, sticky=tk.W)
rules_text = tk.Text(root, height=5, width=50)
rules_text.grid(row=0, column=1)

ttk.Label(root, text="Start Symbol:").grid(row=1, column=0, sticky=tk.W)
start_symbol_entry = ttk.Entry(root)
start_symbol_entry.grid(row=1, column=1)

ttk.Label(root, text="Max Length of Strings:").grid(row=2, column=0, sticky=tk.W)
max_length_entry = ttk.Entry(root)
max_length_entry.grid(row=2, column=1)

# Buttons for generating strings and validating input
generate_button = ttk.Button(root, text="Generate Strings", command=on_generate)
generate_button.grid(row=3, column=0, columnspan=2)

ttk.Label(root, text="Validate String:").grid(row=4, column=0, sticky=tk.W)
validate_entry = ttk.Entry(root)
validate_entry.grid(row=4, column=1)

validate_button = ttk.Button(root, text="Validate", command=on_validate)
validate_button.grid(row=5, column=0, columnspan=2)

# Output field for generated strings
output_text = tk.Text(root, height=10, width=50)
output_text.grid(row=6, column=0, columnspan=2)

# Run the Tkinter event loop
root.mainloop()